#!/usr/bin/env bash

# A best practices Bash script template with many useful functions. This file
# combines the source.sh & script.sh files into a single script. If you want
# your script to be entirely self-contained then this should be what you want!

# Enable xtrace if the DEBUG environment variable is set
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
    set -o xtrace       # Trace the execution of the script (debug)
fi

# Only enable these shell behaviours if we're not being sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2> /dev/null); then
    # A better class of script...
    set -o errexit      # Exit on most errors (see the manual)
    set -o nounset      # Disallow expansion of unset variables
    set -o pipefail     # Use last non-zero exit code in a pipeline
fi

# Enable errtrace or the error trap handler will not work as expected
set -o errtrace         # Ensure the error trap handler is inherited

# DESC: Handler for unexpected errors
# ARGS: $1 (optional): Exit code (defaults to 1)
# OUTS: None
function script_trap_err() {
    local exit_code=1

    # Disable the error trap handler to prevent potential recursion
    trap - ERR

    # Consider any further errors non-fatal to ensure we run to completion
    set +o errexit
    set +o pipefail

    # Validate any provided exit code
    if [[ ${1-} =~ ^[0-9]+$ ]]; then
        exit_code="$1"
    fi

    # Output debug data if in Cron mode
    if [[ -n ${quiet-} ]]; then
        # Restore original file output descriptors
        if [[ -n ${script_output-} ]]; then
            exec 1>&3 2>&4
        fi

        # Print basic debugging information
        printf '%b\n' "$ta_none"
        printf '***** Abnormal termination of script *****\n'
        printf 'Script Path:            %s\n' "$script_path"
        printf 'Script Parameters:      %s\n' "$script_params"
        printf 'Script Exit Code:       %s\n' "$exit_code"

        # Print the script log if we have it. It's possible we may not if we
        # failed before we even called cron_init(). This can happen if bad
        # parameters were passed to the script so we bailed out very early.
        if [[ -n ${script_output-} ]]; then
            # shellcheck disable=SC2312
            printf 'Script Output:\n\n%s' "$(cat "$script_output")"
        else
            printf 'Script Output:          None (failed before log init)\n'
        fi
    fi

    # Exit with failure status
    exit "$exit_code"
}

# DESC: Handler for exiting the script
# ARGS: None
# OUTS: None
function script_trap_exit() {
    cd "$orig_cwd"

    # Remove Cron mode script log
    if [[ -n ${quiet-} && -f ${script_output-} ]]; then
        rm "$script_output"
    fi

    # Remove script execution lock
    if [[ -d ${script_lock-} ]]; then
        rmdir "$script_lock"
    fi

    script_cleanup

    # Restore terminal colours
    printf '%b' "$ta_none"
}

# DESC: Exit script with the given message
# ARGS: $1 (required): Message to print on exit
#       $2 (optional): Exit code (defaults to 0)
# OUTS: None
# NOTE: The convention used in this script for exit codes is:
#       0: Normal exit
#       1: Abnormal exit due to external error
#       2: Abnormal exit due to script error
function script_exit() {
    if [[ $# -eq 1 ]]; then
        printf '%s\n' "$1"
        exit 0
    fi

    if [[ ${2-} =~ ^[0-9]+$ ]]; then
        printf '%b\n' "$1"
        # If we've been provided a non-zero exit code run the error trap
        if [[ $2 -ne 0 ]]; then
            script_trap_err "$2"
        else
            exit 0
        fi
    fi

    script_exit 'Missing required argument to script_exit()!' 2
}

# DESC: Generic script initialisation
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: $orig_cwd: The current working directory when the script was run
#       $script_path: The full path to the script
#       $script_dir: The directory path of the script
#       $script_name: The file name of the script
#       $script_params: The original parameters provided to the script
#       $ta_none: The ANSI control code to reset all text attributes
# NOTE: $script_path only contains the path that was used to call the script
#       and will not resolve any symlinks which may be present in the path.
#       You can use a tool like realpath to obtain the "true" path. The same
#       caveat applies to both the $script_dir and $script_name variables.
# shellcheck disable=SC2034
function script_init() {
    # Useful variables
    readonly orig_cwd="$PWD"
    readonly script_params="$*"
    readonly script_path="${BASH_SOURCE[0]}"
    script_dir="$(dirname "$script_path")"
    script_name="$(basename "$script_path")"
    readonly script_dir script_name

    # Important to always set as we use it in the exit handler
    # shellcheck disable=SC2155
    readonly ta_none="$(tput sgr0 2> /dev/null || true)"
    check_requirements
}

# DESC: Generic script cleanup
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: NONE
function script_cleanup() {
  true
}

# DESC: Initialise colour variables
# ARGS: None
# OUTS: Read-only variables with ANSI control codes
# NOTE: If --monochrome was set the variables will be empty. The output of the
#       $ta_none variable after each tput is redundant during normal execution,
#       but ensures the terminal output isn't mangled when running with xtrace.
# shellcheck disable=SC2034,SC2155
function colour_init() {
    if [[ -z ${monochrome-} ]]; then
        # Text attributes
        readonly ta_bold="$(tput bold 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_uscore="$(tput smul 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_blink="$(tput blink 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_reverse="$(tput rev 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly ta_conceal="$(tput invis 2> /dev/null || true)"
        printf '%b' "$ta_none"

        # Foreground codes
        readonly fg_black="$(tput setaf 0 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_blue="$(tput setaf 4 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_cyan="$(tput setaf 6 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_green="$(tput setaf 2 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_magenta="$(tput setaf 5 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_red="$(tput setaf 1 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_white="$(tput setaf 7 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly fg_yellow="$(tput setaf 3 2> /dev/null || true)"
        printf '%b' "$ta_none"

        # Background codes
        readonly bg_black="$(tput setab 0 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_blue="$(tput setab 4 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_cyan="$(tput setab 6 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_green="$(tput setab 2 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_magenta="$(tput setab 5 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_red="$(tput setab 1 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_white="$(tput setab 7 2> /dev/null || true)"
        printf '%b' "$ta_none"
        readonly bg_yellow="$(tput setab 3 2> /dev/null || true)"
        printf '%b' "$ta_none"
    else
        # Text attributes
        readonly ta_bold=''
        readonly ta_uscore=''
        readonly ta_blink=''
        readonly ta_reverse=''
        readonly ta_conceal=''

        # Foreground codes
        readonly fg_black=''
        readonly fg_blue=''
        readonly fg_cyan=''
        readonly fg_green=''
        readonly fg_magenta=''
        readonly fg_red=''
        readonly fg_white=''
        readonly fg_yellow=''

        # Background codes
        readonly bg_black=''
        readonly bg_blue=''
        readonly bg_cyan=''
        readonly bg_green=''
        readonly bg_magenta=''
        readonly bg_red=''
        readonly bg_white=''
        readonly bg_yellow=''
    fi
}

# DESC: Initialise Cron mode
# ARGS: None
# OUTS: $script_output: Path to the file stdout & stderr was redirected to
function cron_init() {
    if [[ -n ${quiet-} ]]; then
        # Redirect all output to a temporary file
        script_output="$(mktemp --tmpdir "$script_name".XXXXX)"
        readonly script_output
        exec 3>&1 4>&2 1> "$script_output" 2>&1
    fi
}

# DESC: Acquire script lock
# ARGS: $1 (optional): Scope of script execution lock (system or user)
# OUTS: $script_lock: Path to the directory indicating we have the script lock
# NOTE: This lock implementation is extremely simple but should be reliable
#       across all platforms. It does *not* support locking a script with
#       symlinks or multiple hardlinks as there's no portable way of doing so.
#       If the lock was acquired it's automatically released on script exit.
function lock_init() {
    local lock_dir
    if [[ $1 = 'system' ]]; then
        lock_dir="/tmp/$script_name.lock"
    elif [[ $1 = 'user' ]]; then
        lock_dir="/tmp/$script_name.$UID.lock"
    else
        script_exit 'Missing or invalid argument to lock_init()!' 2
    fi

    if mkdir "$lock_dir" 2> /dev/null; then
        readonly script_lock="$lock_dir"
        verbose_print "Acquired script lock: $script_lock"
    else
        script_exit "Unable to acquire script lock: $lock_dir" 1
    fi
}

# DESC: Pretty print the provided string
# ARGS: $1 (required): Message to print (defaults to a green foreground)
#       $2 (optional): Colour to print the message with. This can be an ANSI
#                      escape code or one of the prepopulated colour variables.
#       $3 (optional): Set to any value to not append a new line to the message
# OUTS: None
function pretty_print() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to pretty_print()!' 2
    fi

    if [[ -z ${monochrome-} ]]; then
        if [[ -n ${2-} ]]; then
            printf '%b' "$2"
        else
            printf '%b' "$fg_green"
        fi
    fi

    # Print message & reset text attributes
    if [[ -n ${3-} ]]; then
        printf '%s%b' "$1" "$ta_none"
    else
        printf '%s%b\n' "$1" "$ta_none"
    fi
}

# DESC: Only pretty_print() the provided string if verbose mode is enabled
# ARGS: $@ (required): Passed through to pretty_print() function
# OUTS: None
function verbose_print() {
    if [[ -n ${verbose-} ]]; then
        pretty_print "$@"
    fi
}

# DESC: Combines two path variables and removes any duplicates
# ARGS: $1 (required): Path(s) to join with the second argument
#       $2 (optional): Path(s) to join with the first argument
# OUTS: $build_path: The constructed path
# NOTE: Heavily inspired by: https://unix.stackexchange.com/a/40973
function build_path() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to build_path()!' 2
    fi

    local new_path path_entry temp_path

    temp_path="$1:"
    if [[ -n ${2-} ]]; then
        temp_path="$temp_path$2:"
    fi

    new_path=
    while [[ -n $temp_path ]]; do
        path_entry="${temp_path%%:*}"
        case "$new_path:" in
            *:"$path_entry":*) ;;
            *)
                new_path="$new_path:$path_entry"
                ;;
        esac
        temp_path="${temp_path#*:}"
    done

    # shellcheck disable=SC2034
    build_path="${new_path#:}"
}

# DESC: Check a binary exists in the search path
# ARGS: $1 (required): Name of the binary to test for existence
#       $2 (optional): Set to any value to treat failure as a fatal error
# OUTS: None
function check_binary() {
    if [[ $# -lt 1 ]]; then
        script_exit 'Missing required argument to check_binary()!' 2
    fi

    if ! command -v "$1" > /dev/null 2>&1; then
        if [[ -n ${2-} ]]; then
            script_exit "Missing dependency: Couldn't locate $1." 1
        else
            verbose_print "Missing dependency: $1" "${fg_red-}"
            return 1
        fi
    fi

    verbose_print "Found dependency: $1"
    return 0
}

# DESC: Validate we have superuser access as root (via sudo if requested)
# ARGS: $1 (optional): Set to any value to not attempt root access via sudo
# OUTS: None
function check_superuser() {
    local superuser
    if [[ $EUID -eq 0 ]]; then
        superuser=true
    elif [[ -z ${1-} ]]; then
        # shellcheck disable=SC2310
        if check_binary sudo; then
            verbose_print 'Sudo: Updating cached credentials ...'
            if ! sudo -v; then
                verbose_print "Sudo: Couldn't acquire credentials ..." \
                    "${fg_red-}"
            else
                local test_euid
                test_euid="$(sudo -H -- "$BASH" -c 'printf "%s" "$EUID"')"
                if [[ $test_euid -eq 0 ]]; then
                    superuser=true
                fi
            fi
        fi
    fi

    if [[ -z ${superuser-} ]]; then
        verbose_print 'Unable to acquire superuser credentials.' "${fg_red-}"
        return 1
    fi

    verbose_print 'Successfully acquired superuser credentials.'
    return 0
}

# DESC: Run the requested command as root (via sudo if requested)
# ARGS: $1 (optional): Set to zero to not attempt execution via sudo
#       $@ (required): Passed through for execution as root user
# OUTS: None
function run_as_root() {
    if [[ $# -eq 0 ]]; then
        script_exit 'Missing required argument to run_as_root()!' 2
    fi

    if [[ ${1-} =~ ^0$ ]]; then
        local skip_sudo=true
        shift
    fi

    if [[ $EUID -eq 0 ]]; then
        "$@"
    elif [[ -z ${skip_sudo-} ]]; then
        sudo -H -- "$@"
    else
        script_exit "Unable to run requested command as root: $*" 1
    fi
}

# DESC: Get base project authors
# ARGS: None
# OUTS: RTM_TPL_AUTHORS with default $USER.
function get_authors() {
    if [[ -z ${RTM_TPL_AUTHORS-} ]]; then
        RTM_TPL_AUTHORS="$(enquirer input --default $USER --message 'Project authors?')"
        export RTM_TPL_AUTHORS
    fi
    verbose_print "Project authors: ${RTM_TPL_AUTHORS}"
}

# DESC: Get parent directory for the project
# ARGS: None
# OUTS: RTM_TPL_PARENT_DIR with default $(pwd).
function get_parent_dir() {
    if [[ -z ${RTM_TPL_PARENT_DIR-} ]]; then
        RTM_TPL_PARENT_DIR="$(enquirer input --default "$(pwd)" --message 'Project parent folder?')"
        export RTM_TPL_PARENT_DIR
    fi
    verbose_print "Project parent directory: ${RTM_TPL_PARENT_DIR}"
}

# DESC: Get crate type
# ARGS: None
# OUTS: RTM_TPL_CRATE_TYPE one or more of `binary library` with
#       `library` as default.
function get_crate_type() {
    if [[ -z ${RTM_TPL_CRATE_TYPE-} ]]; then
        RTM_TPL_CRATE_TYPE="$(enquirer multi-select --cancel --default --selected 2 --message 'Will this crate build?' -- binary library)"
        export RTM_TPL_CRATE_TYPE
    fi
    verbose_print "Crate type: ${RTM_TPL_CRATE_TYPE}"
}

# DESC: Get license types
# ARGS: None
# OUTS: RTM_TPL_LICENSES one or more of `mit apache2` with
#       `mit apache2` as default.
function get_licenses() {
    if [[ -z ${RTM_TPL_LICENSES-} ]]; then
        RTM_TPL_LICENSES="$(enquirer multi-select --cancel --default --selected 1 2 --message 'Which licenses for this project?' -- mit apache2)"
        export RTM_TPL_LICENSES
    fi
    verbose_print "Licenses: ${RTM_TPL_LICENSES}"
}

# DESC: Get storage adapter types
# ARGS: None
# OUTS: RTM_TPL_STORAGE_ADAPTERS or more of `csv http json sql yaml` with
#       `sql` as default.
function get_storage_adapters() {
    if [[ -z ${RTM_TPL_STORAGE_ADAPTERS-} ]]; then
        RTM_TPL_STORAGE_ADAPTERS="$(enquirer multi-select --cancel --default --selected 4 --message 'Which storage adapters for this project?' -- csv http json sql yaml)"
        export RTM_TPL_STORAGE_ADAPTERS
    fi
    verbose_print "Storage adapters: ${RTM_TPL_STORAGE_ADAPTERS}"
}

# DESC: Get SQL vendor
# ARGS: None
# OUTS: RTM_TPL_SQL_VENDOR or more of `mysql postgres sqlite` with
#       `sqlite` as default.
function get_sql_vendor() {
    if [[ -z ${RTM_TPL_SQL_VENDOR-} ]]; then
        RTM_TPL_SQL_VENDOR="$(enquirer multi-select --cancel --default --selected 3 --message 'Which SQL vendor?' -- mysql postgres sqlite)"
        export RTM_TPL_SQL_VENDOR
    fi
    verbose_print "SQL vendor: ${RTM_TPL_SQL_VENDOR}"
}

# DESC: Get SQL Object Relation Mapping (ORM) crate
# ARGS: None
# OUTS: RTM_TPL_SQL_ORM or more of `sea-orm diesel` with
#       `sql` as default.
function get_sql_orm() {
    if [[ -z ${RTM_TPL_SQL_ORM-} ]]; then
        RTM_TPL_SQL_ORM="$(enquirer multi-select --cancel --default --selected 1 --message 'Which SQL Object Relation Mapping crate?' -- sea-orm diesel)"
        export RTM_TPL_SQL_ORM
    fi
    verbose_print "SQL Object Relation Mapping crate: ${RTM_TPL_SQL_ORM}"
}

# DESC: Get SQL migration tool
# ARGS: None
# OUTS: RTM_TPL_SQL_MIGRATION or more of `none refinery sea-orm` with
#       `refinery` as default.
function get_sql_migration() {
    if [[ -z ${RTM_TPL_SQL_MIGRATION-} ]]; then
        RTM_TPL_SQL_MIGRATION="$(enquirer multi-select --cancel --default --selected 2 --message 'Which SQL migration crate?' -- none refinery sea-orm)"
        export RTM_TPL_SQL_MIGRATION
    fi
    verbose_print "SQL migration crate: ${RTM_TPL_SQL_MIGRATION}"
}

# DESC: Get SQL vendor DB user name
# ARGS: None
# OUTS: RTM_TPL_SQL_DB_USER string for DB user name `$USER` is default.
function get_sql_db_user() {
    if [[ -z ${RTM_TPL_SQL_DB_USER-} ]]; then
        RTM_TPL_SQL_DB_USER="$(enquirer input --default $USER --message 'What is your SQL vendor DB user name?')"
        export RTM_TPL_SQL_DB_USER
    fi
    verbose_print "SQL vendor DB user name: ${RTM_TPL_SQL_DB_USER}"
}

# DESC: Get SQL vendor DB user password
# ARGS: None
# OUTS: RTM_TPL_SQL_DB_PASSWORD string for DB user password.
function get_sql_db_password() {
    if [[ -z ${RTM_TPL_SQL_DB_PASSWORD-} ]]; then
        RTM_TPL_SQL_DB_HOSTRTM_TPL_SQL_DB_PASSWORD="$(enquirer secret --message 'What is your SQL vendor DB user password?' --confirm 'Please confirm:' --error 'The passwords do not match.')"
        export RTM_TPL_SQL_DB_PASSWORD
    fi
    verbose_print "SQL vendor DB user password: ${RTM_TPL_SQL_DB_PASSWORD}"
}

# DESC: Get SQL vendor DB host IP or FQDN (non-SQLite)
# ARGS: None
# OUTS: RTM_TPL_SQL_DB_HOST string for DB IP address or Fully Qualified Domain Name (FQDN).
function get_sql_db_host() {
    if [[ -z ${RTM_TPL_SQL_DB_HOST-} ]]; then
        RTM_TPL_SQL_DB_HOST="$(enquirer input --default 127.0.0.1 --message 'What is the SQL vendor DB host IP or FQDN?')"
        export RTM_TPL_SQL_DB_HOST
    fi
    verbose_print "SQL vendor DB host: ${RTM_TPL_SQL_DB_HOST}"
}

# DESC: Get SQL vendor DB port number (non-SQLite)
# ARGS: None
# OUTS: RTM_TPL_SQL_DB_HOST string for DB port number.
function get_sql_db_port() {
    if [[ -z ${RTM_TPL_SQL_DB_PORT-} ]]; then
        RTM_TPL_SQL_DB_PORT="$(enquirer input --default 5432 --message 'What is the SQL vendor DB port number?')"
        export RTM_TPL_SQL_DB_PORT
    fi
    verbose_print "SQL vendor DB port: ${RTM_TPL_SQL_DB_PORT}"
}

# DESC: Get SQL vendor DB name (non-SQLite)
# ARGS: None
# OUTS: RTM_TPL_SQL_DB_HOST string for DB name.
function get_sql_db_name() {
    if [[ -z ${RTM_TPL_SQL_DB_NAME-} ]]; then
        RTM_TPL_SQL_DB_NAME="$(enquirer input --default 5432 --message 'What is the SQL vendor DB name?')"
        export RTM_TPL_SQL_DB_NAME
    fi
    verbose_print "SQL vendor DB name: ${RTM_TPL_SQL_DB_NAME}"
}

# DESC: Get SQL vendor DB path (SQLite)
# ARGS: None
# OUTS: RTM_TPL_SQL_DB_PATH string for DB path.
function get_sql_db_path() {
    if [[ -z ${RTM_TPL_SQL_DB_PATH-} ]]; then
        RTM_TPL_SQL_DB_PATH="$(enquirer input --default "$(pwd)/main.db" --message 'What is the SQL vendor DB path?')"
        export RTM_TPL_SQL_DB_PATH
    fi
    verbose_print "SQL vendor DB path: ${RTM_TPL_SQL_DB_PATH}"
}

# DESC: Gather user input for base template storage adapter CSV
# ARGS: None
# OUTS: None
function gather_input_base_csv(){
    rm -rf "${RTM_TEMPLATE_DATA}"
    script_exit "Not yet implemented.  Pull requests welcome: https://github.com/rtm-rs/template" 1
}

# DESC: Gather user input for base template storage adapter HTTP
# ARGS: None
# OUTS: None
function gather_input_base_http(){
    rm -rf "${RTM_TEMPLATE_DATA}"
    script_exit "Not yet implemented.  Pull requests welcome: https://github.com/rtm-rs/template" 1
}

# DESC: Gather user input for base template storage adapter JSON
# ARGS: None
# OUTS: None
function gather_input_base_json(){
    rm -rf "${RTM_TEMPLATE_DATA}"
    script_exit "Not yet implemented.  Pull requests welcome: https://github.com/rtm-rs/template" 1
}

# DESC: Gather user input for base template storage adapter SQL
# ARGS: None
# OUTS: None
function gather_input_base_sql(){
    get_sql_orm
    get_sql_migration
    get_sql_vendor
    case "${RTM_TPL_SQL_VENDOR}" in
        mysql | postgres)
            get_sql_db_user
            get_sql_db_password
            get_sql_db_host
            get_sql_db_port
            get_sql_db_name
        ;;
        sqlite)
            get_sql_db_path
        ;;
        *)
            rm -rf "${RTM_TEMPLATE_DATA}"
            script_exit "Unknown SQL vendor in RTM_TPL_SQL_VENDOR: ${RTM_TPL_SQL_VENDOR}" 1
        ;;
    esac
}

# DESC: Gather user input for base template storage adapter YAML
# ARGS: None
# OUTS: None
function gather_input_base_yaml(){
    rm -rf "${RTM_TEMPLATE_DATA}"
    script_exit "Not yet implemented.  Pull requests welcome: https://github.com/rtm-rs/template" 1
}

## See end of the script for these functions (VSCode issue #77675)
#
# get_source
# get_tls

# DESC: Gather user input for base template
# ARGS: None
# OUTS: None
function gather_input_base(){
    get_parent_dir
    get_source
    get_authors
    get_licenses
    get_crate_type
    get_storage_adapters
    get_tls
    for adapter in $RTM_TPL_STORAGE_ADAPTERS;
    do
        case "$adapter" in
            csv) gather_input_base_csv
            ;;
            http) gather_input_base_http
            ;;
            json) gather_input_base_json
            ;;
            sql) gather_input_base_sql
            ;;
            yaml) gather_input_base_yaml
            ;;
            *)
                rm -rf "${RTM_TEMPLATE_DATA}"
                script_exit "Unknown storage adapter in RTM_TPL_STORAGE_ADAPTERS: ${RTM_TPL_STORAGE_ADAPTERS}" 1
            ;;
        esac
    done
}

# DESC: Usage help
# ARGS: None
# OUTS: None
function script_usage() {
    cat << EOF
Usage:
     -h|--help          Display this help
     -m|--monochrome    Disable colour output
     -q|--quiet         Run silently unless an error occurs
     -v|--verbose       Display verbose output
EOF
}

# DESC: Generate from base template
# ARGS: None
# OUTS: None
function generate_base() {
    if [[ -z ${RTM_TEMPLATE_DATA-} ]]; then
        RTM_TEMPLATE_DATA=$(mktemp --directory)
        verbose_print "Created (RTM_TEMPLATE_DATA): ${RTM_TEMPLATE_DATA}"
    fi
    verbose_print "Using (RTM_TEMPLATE_DATA): ${RTM_TEMPLATE_DATA}"
    verbose_print "Using (RTM_TEMPLATE_URL): ${RTM_TEMPLATE_URL}"
    git clone file://"${RTM_TEMPLATE_URL}" "${RTM_TEMPLATE_DATA}"
    gather_input_base
    pushd "${RTM_TEMPLATE_DATA}"

    popd
    rm -rf "${RTM_TEMPLATE_DATA}"
}

# DESC: Check requirements once only
# ARGS: None
# OUTS: None
function check_requirements() {
    # Has the user has pointed elsewhere?
    if [[ ! -n ${RTM_TEMPLATE_URL-} ]]; then
        export RTM_TEMPLATE_URL="https://github.com/rtm-rs/template.git"
    fi
    if [[ ! -n ${XDG_STATE_HOME-} ]]; then
        export XDG_STATE_HOME="${HOME}/.local/state"
    fi
    if [[ ! -d "${XDG_STATE_HOME}" ]]; then
        mkdir -p "${XDG_STATE_HOME}"
    fi
    if [[ -n ${RTM_SETUP-} ]]; then
        return 0
    fi
    check_binary git
    check_binary sed
    check_binary enquirer
    export RTM_SETUP=true
    touch "${XDG_STATE_HOME}/rtm_setup"
}

# DESC: Parameter parser
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: Variables indicating command-line parameters and options
function parse_params() {
    local param
    while [[ $# -gt 0 ]]; do
        param="$1"
        shift
        case $param in
            -h | --help)
                script_usage
                exit 0
                ;;
            -v | --verbose)
                verbose=true
                ;;
            -m | --monochrome)
                monochrome=true
                ;;
            -q | --quiet)
                quiet=true
                ;;
            base)
                generate_base
                ;;
            *)
                script_exit "Invalid parameter was provided: $param" 1
                ;;
        esac
    done
}

# DESC: Main control flow
# ARGS: $@ (optional): Arguments provided to the script
# OUTS: None
function main() {
    trap script_trap_err ERR
    trap script_trap_exit EXIT

    script_init "$@"
    parse_params "$@"
    cron_init
    colour_init
    #lock_init system
}

## VS Code issue #77675
#
# The following function syntax (`enquirer select ...`) breaks VSCode syntax
# highlighting.
# Consequently, these functions should remain at the end of the script.
#

# DESC: Get RTM source
# ARGS: None
# OUTS: RTM_TPL_SOURCE one of `crates.io github.com` with crates.io as default.
function get_source() {
    if [[ -z ${RTM_TPL_SOURCE-} ]]
    then
        RTM_TPL_SOURCE="$(enquirer select --cancel --default --selected 1 --message 'Install RTM from?' -- crates.io github.com)"
        export RTM_TPL_SOURCE
    fi
    verbose_print "RTM install source: ${RTM_TPL_SOURCE}"
}

# DESC: Get TLS
# ARGS: None
# OUTS: RTM_TPL_TLS one of `none native-tls rustls` with `none` as default.
function get_tls() {
    if [[ -z ${RTM_TPL_TLS-} ]]; then
        RTM_TPL_TLS="$(enquirer select --cancel --default --selected 1 --message 'Which Transport Layer Security (TLS)?' -- none native-tls rustls)"
        export RTM_TPL_TLS
    fi
    verbose_print "Transport Layer Security (TLS): ${RTM_TPL_TLS}"
}

# Invoke main with args if not sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2> /dev/null); then
    main "$@"
fi

# vim: syntax=sh cc=80 tw=79 ts=4 sw=4 sts=4 et sr
